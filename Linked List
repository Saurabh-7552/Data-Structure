#################################################################################################################################
Going to little bit of history of the Linked List
Linked lists were developed in 1955â€“1956 by Allen Newell, Cliff Shaw and Herbert A. Simon at RAND Corporation as the primary data 
structure for their Information Processing Language. IPL was used by the authors to develop several early artificial intelligence 
programs, including the Logic Theory Machine, the General Problem Solver, and a computer chess program. 
##################################################################################################################################
In computer science, a linked list is a linear collection of data elements, whose order is not given by their physical placement in 
memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a 
sequence. In its most basic form, each node contains: data, and a reference (in other words, a link) to the next node in the sequence. 
This structure allows for efficient insertion or removal of elements from any position in the sequence during iteration. More complex 
variants add additional links, allowing more efficient insertion or removal of nodes at arbitrary positions. A drawback of linked lists 
is that access time is linear (and difficult to pipeline). Faster access, such as random access, is not feasible. Arrays have better 
cache locality compared to linked lists.

Linked lists are among the simplest and most common data structures. They can be used to implement several other common abstract data 
types, including lists, stacks, queues, associative arrays, and S-expressions, though it is not uncommon to implement those data 
structures directly without using a linked list as the basis.
###################################################################################################################################
The Simple implementation of linked list is given in code section .
/*
 Time Complexity of each operation
Insertion: O(1)
Deletion:O(1)
Searching: Worst:O(n) best:O(1)
Finding Middle Element:O(n/2)
Display:O(n)
Reversing:O(n)
*/
